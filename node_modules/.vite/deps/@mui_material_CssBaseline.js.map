{"version":3,"file":"@mui_material_CssBaseline.js","names":["PropTypes"],"sources":["../../@mui/material/esm/CssBaseline/CssBaseline.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\n\n// to determine if the global styles are static or dynamic\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  const colorSchemeStyles = {};\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n  return defaultStyles;\n};\n\n// `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\nconst SELECTOR = 'mui-ecs';\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n  return result;\n};\nconst GlobalStyles = globalCss(isDynamicSupport ? ({\n  theme,\n  enableColorScheme\n}) => styles(theme, enableColorScheme) : ({\n  theme\n}) => staticStyles(theme));\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;"],"mappings":";;;;;;;;;;;AASA,IAAM,mBAAmB,OAAO,UAAU,EAAE,CAAC,KAAK;AAClD,MAAa,QAAQ,OAAO,uBAAuB;CACjD,qBAAqB;CAErB,qBAAqB;CAIrB,WAAW;CAEX,sBAAsB;CAEtB,GAAI,qBAAqB,CAAC,MAAM,QAAQ,EACtC,aAAa,MAAM,QAAQ,MAC5B;CACF;AACD,MAAa,QAAO,WAAU;CAC5B,QAAQ,MAAM,QAAQ,OAAO,QAAQ,KAAK;CAC1C,GAAG,MAAM,WAAW;CACpB,kBAAkB,MAAM,QAAQ,OAAO,QAAQ,WAAW;CAC1D,gBAAgB,EAEd,kBAAkB,MAAM,QAAQ,OAAO,QAAQ,OAAO,OACvD;CACF;AACD,MAAa,UAAU,OAAO,oBAAoB,UAAU;CAC1D,MAAM,oBAAoB,EAAE;AAC5B,KAAI,qBAAqB,MAAM,gBAAgB,OAAO,MAAM,2BAA2B,WACrF,QAAO,QAAQ,MAAM,aAAa,CAAC,SAAS,CAAC,KAAK,YAAY;EAC5D,MAAM,WAAW,MAAM,uBAAuB,IAAI;AAClD,MAAI,SAAS,WAAW,IAAI,CAE1B,mBAAkB,YAAY,EAC5B,SAAS,EACP,aAAa,OAAO,SAAS,MAC9B,EACF;MAGD,mBAAkB,SAAS,QAAQ,QAAQ,GAAG,IAAI,EAChD,aAAa,OAAO,SAAS,MAC9B;GAEH;CAEJ,IAAI,gBAAgB;EAClB,MAAM,KAAK,OAAO,kBAAkB;EACpC,0BAA0B,EACxB,WAAW,WACZ;EACD,aAAa,EACX,YAAY,MAAM,WAAW,gBAC9B;EACD,MAAM;GACJ,QAAQ;GAER,GAAG,KAAK,MAAM;GAGd,eAAe,EACb,kBAAkB,MAAM,QAAQ,OAAO,QAAQ,WAAW,SAC3D;GACF;EACD,GAAG;EACJ;CACD,MAAM,iBAAiB,MAAM,YAAY,gBAAgB;AACzD,KAAI,eACF,iBAAgB,CAAC,eAAe,eAAe;AAEjD,QAAO;;AAIT,IAAM,WAAW;AACjB,IAAM,gBAAe,UAAS;CAC5B,MAAM,SAAS,OAAO,OAAO,MAAM;CACnC,MAAM,aAAa,MAAM,QAAQ,OAAO,GAAG,OAAO,KAAK;AACvD,KAAI,CAAC,MAAM,QAAQ,WACjB,YAAW,KAAK,aAAa,SAAS,MAAM,EAC1C,aAAa,MAAM,QAAQ,MAC5B;AAEH,KAAI,MAAM,aACR,QAAO,QAAQ,MAAM,aAAa,CAAC,SAAS,CAAC,KAAK,YAAY;EAC5D,MAAM,WAAW,MAAM,uBAAuB,IAAI;AAClD,MAAI,SAAS,WAAW,IAAI,CAE1B,YAAW,YAAY,GACpB,mBAAmB,SAAS,MAAM,EACjC,aAAa,OAAO,SAAS,MAC9B,EACF;MAGD,YAAW,SAAS,QAAQ,QAAQ,GAAG,IAAI,GACxC,eAAe,SAAS,MAAM,EAC7B,aAAa,OAAO,SAAS,MAC9B,EACF;GAEH;AAEJ,QAAO;;AAET,IAAM,eAAe,UAAU,oBAAoB,EACjD,OACA,wBACI,OAAO,OAAO,kBAAkB,IAAI,EACxC,YACI,aAAa,MAAM,CAAC;;;;AAK1B,SAAS,YAAY,SAAS;CAK5B,MAAM,EACJ,UACA,oBAAoB,UANR,gBAAgB;EAC5B,OAAO;EACP,MAAM;EACP,CAAC;AAKF,QAAoB,0DAAY,UAAU,EACxC,UAAU;EAAC,oBAAiC,4CAAK,cAAc,EAC1C,mBACpB,CAAC;EAAE,CAAC,oBAAoB,CAAC,qBAAkC,4CAAK,QAAQ;GACvE,WAAW;GACX,OAAO,EACL,SAAS,QACV;GACF,CAAC;EAAE;EAAS,EACd,CAAC;;AAEoC,YAAY,YAAmC;CAQrF,UAAUA,0BAAU;CAOpB,mBAAmBA,0BAAU;CAC9B;AACD,0BAAe"}