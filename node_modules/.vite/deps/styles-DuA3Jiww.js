import { __toESM } from "./chunk-DbKvDyjX.js";
import { require_react } from "./react-C7PpavTg.js";
import { CacheProvider, InitColorSchemeScript, StyleSheet, ThemeProvider_default, createBreakpoints, createCache, createCssVarsProvider, createSpacing, createTheme, createThemeWithVars, createTypography, deepmerge, defaultTheme_default, identifier_default, require_prop_types, resolveProps, styleFunctionSx_default, useTheme_default } from "./styled-DSC9b8yd.js";
import { require_jsx_runtime } from "./jsx-runtime-1KWngW6r.js";

//#region node_modules/@mui/styled-engine/esm/StyledEngineProvider/StyledEngineProvider.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var import_prop_types$1 = /* @__PURE__ */ __toESM(require_prop_types(), 1);
var import_jsx_runtime = /* @__PURE__ */ __toESM(require_jsx_runtime(), 1);
var cacheMap = /* @__PURE__ */ new Map();
const TEST_INTERNALS_DO_NOT_USE = { insert: void 0 };
var createEmotionCache = (options, CustomSheet) => {
	const cache = createCache(options);
	cache.sheet = new CustomSheet({
		key: cache.key,
		nonce: cache.sheet.nonce,
		container: cache.sheet.container,
		speedy: cache.sheet.isSpeedy,
		prepend: cache.sheet.prepend,
		insertionPoint: cache.sheet.insertionPoint
	});
	return cache;
};
var insertionPoint;
if (typeof document === "object") {
	insertionPoint = document.querySelector("[name=\"emotion-insertion-point\"]");
	if (!insertionPoint) {
		insertionPoint = document.createElement("meta");
		insertionPoint.setAttribute("name", "emotion-insertion-point");
		insertionPoint.setAttribute("content", "");
		const head = document.querySelector("head");
		if (head) head.prepend(insertionPoint);
	}
}
function getCache(injectFirst, enableCssLayer) {
	if (injectFirst || enableCssLayer) {
		/**
		* This is for client-side apps only.
		* A custom sheet is required to make the GlobalStyles API injected above the insertion point.
		* This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.
		*/
		class MyStyleSheet extends StyleSheet {
			insert(rule, options) {
				if (TEST_INTERNALS_DO_NOT_USE.insert) return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);
				if (this.key && this.key.endsWith("global")) this.before = insertionPoint;
				return super.insert(rule, options);
			}
		}
		const emotionCache = createEmotionCache({
			key: "css",
			insertionPoint: injectFirst ? insertionPoint : void 0
		}, MyStyleSheet);
		if (enableCssLayer) {
			const prevInsert = emotionCache.insert;
			emotionCache.insert = (...args) => {
				if (!args[1].styles.match(/^@layer\s+[^{]*$/)) args[1].styles = `@layer mui {${args[1].styles}}`;
				return prevInsert(...args);
			};
		}
		return emotionCache;
	}
}
function StyledEngineProvider(props) {
	const { injectFirst, enableCssLayer, children } = props;
	const cache = import_react.useMemo(() => {
		const cacheKey = `${injectFirst}-${enableCssLayer}`;
		if (typeof document === "object" && cacheMap.has(cacheKey)) return cacheMap.get(cacheKey);
		const fresh = getCache(injectFirst, enableCssLayer);
		cacheMap.set(cacheKey, fresh);
		return fresh;
	}, [injectFirst, enableCssLayer]);
	return cache ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CacheProvider, {
		value: cache,
		children
	}) : children;
}
StyledEngineProvider.propTypes = {
	children: import_prop_types$1.default.node,
	enableCssLayer: import_prop_types$1.default.bool,
	injectFirst: import_prop_types$1.default.bool
};

//#endregion
//#region node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
function getThemeProps(params) {
	const { theme, name, props } = params;
	if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) return props;
	return resolveProps(theme.components[name].defaultProps, props);
}

//#endregion
//#region node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
function useThemeProps$1({ props, name, defaultTheme, themeId }) {
	let theme = useTheme_default(defaultTheme);
	if (themeId) theme = theme[themeId] || theme;
	return getThemeProps({
		theme,
		name,
		props
	});
}

//#endregion
//#region node_modules/@mui/material/esm/styles/adaptV4Theme.js
function adaptV4Theme(inputTheme) {
	console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
	const { defaultProps = {}, mixins = {}, overrides = {}, palette = {}, props = {}, styleOverrides = {},...other } = inputTheme;
	const theme = {
		...other,
		components: {}
	};
	Object.keys(defaultProps).forEach((component) => {
		const componentValue = theme.components[component] || {};
		componentValue.defaultProps = defaultProps[component];
		theme.components[component] = componentValue;
	});
	Object.keys(props).forEach((component) => {
		const componentValue = theme.components[component] || {};
		componentValue.defaultProps = props[component];
		theme.components[component] = componentValue;
	});
	Object.keys(styleOverrides).forEach((component) => {
		const componentValue = theme.components[component] || {};
		componentValue.styleOverrides = styleOverrides[component];
		theme.components[component] = componentValue;
	});
	Object.keys(overrides).forEach((component) => {
		const componentValue = theme.components[component] || {};
		componentValue.styleOverrides = overrides[component];
		theme.components[component] = componentValue;
	});
	theme.spacing = createSpacing(inputTheme.spacing);
	const breakpoints = createBreakpoints(inputTheme.breakpoints || {});
	const spacing = theme.spacing;
	theme.mixins = {
		gutters: (styles = {}) => {
			return {
				paddingLeft: spacing(2),
				paddingRight: spacing(2),
				...styles,
				[breakpoints.up("sm")]: {
					paddingLeft: spacing(3),
					paddingRight: spacing(3),
					...styles[breakpoints.up("sm")]
				}
			};
		},
		...mixins
	};
	const { type: typeInput, mode: modeInput,...paletteRest } = palette;
	const finalMode = modeInput || typeInput || "light";
	theme.palette = {
		text: { hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)" },
		mode: finalMode,
		type: finalMode,
		...paletteRest
	};
	return theme;
}

//#endregion
//#region node_modules/@mui/material/esm/styles/createMuiStrictModeTheme.js
function createMuiStrictModeTheme(options, ...args) {
	return createTheme(deepmerge({ unstable_strictMode: true }, options), ...args);
}

//#endregion
//#region node_modules/@mui/material/esm/styles/createStyles.js
var warnedOnce$2 = false;
function createStyles(styles) {
	if (!warnedOnce$2) {
		console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
		warnedOnce$2 = true;
	}
	return styles;
}

//#endregion
//#region node_modules/@mui/material/esm/styles/cssUtils.js
function isUnitless(value) {
	return String(parseFloat(value)).length === String(value).length;
}
function getUnit(input) {
	return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function toUnitless(length) {
	return parseFloat(length);
}
function convertLength(baseFontSize) {
	return (length, toUnit) => {
		const fromUnit = getUnit(length);
		if (fromUnit === toUnit) return length;
		let pxLength = toUnitless(length);
		if (fromUnit !== "px") {
			if (fromUnit === "em") pxLength = toUnitless(length) * toUnitless(baseFontSize);
			else if (fromUnit === "rem") pxLength = toUnitless(length) * toUnitless(baseFontSize);
		}
		let outputLength = pxLength;
		if (toUnit !== "px") if (toUnit === "em") outputLength = pxLength / toUnitless(baseFontSize);
		else if (toUnit === "rem") outputLength = pxLength / toUnitless(baseFontSize);
		else return length;
		return parseFloat(outputLength.toFixed(5)) + toUnit;
	};
}
function alignProperty({ size, grid }) {
	const sizeBelow = size - size % grid;
	const sizeAbove = sizeBelow + grid;
	return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
}
function fontGrid({ lineHeight, pixels, htmlFontSize }) {
	return pixels / (lineHeight * htmlFontSize);
}
/**
* generate a responsive version of a given CSS property
* @example
* responsiveProperty({
*   cssProperty: 'fontSize',
*   min: 15,
*   max: 20,
*   unit: 'px',
*   breakpoints: [300, 600],
* })
*
* // this returns
*
* {
*   fontSize: '15px',
*   '@media (min-width:300px)': {
*     fontSize: '17.5px',
*   },
*   '@media (min-width:600px)': {
*     fontSize: '20px',
*   },
* }
* @param {Object} params
* @param {string} params.cssProperty - The CSS property to be made responsive
* @param {number} params.min - The smallest value of the CSS property
* @param {number} params.max - The largest value of the CSS property
* @param {string} [params.unit] - The unit to be used for the CSS property
* @param {Array.number} [params.breakpoints]  - An array of breakpoints
* @param {number} [params.alignStep] - Round scaled value to fall under this grid
* @returns {Object} responsive styles for {params.cssProperty}
*/
function responsiveProperty({ cssProperty, min, max, unit = "rem", breakpoints = [
	600,
	900,
	1200
], transform = null }) {
	const output = { [cssProperty]: `${min}${unit}` };
	const factor = (max - min) / breakpoints[breakpoints.length - 1];
	breakpoints.forEach((breakpoint) => {
		let value = min + factor * breakpoint;
		if (transform !== null) value = transform(value);
		output[`@media (min-width:${breakpoint}px)`] = { [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}` };
	});
	return output;
}

//#endregion
//#region node_modules/@mui/material/esm/styles/responsiveFontSizes.js
function responsiveFontSizes(themeInput, options = {}) {
	const { breakpoints = [
		"sm",
		"md",
		"lg"
	], disableAlign = false, factor = 2, variants = [
		"h1",
		"h2",
		"h3",
		"h4",
		"h5",
		"h6",
		"subtitle1",
		"subtitle2",
		"body1",
		"body2",
		"caption",
		"button",
		"overline"
	] } = options;
	const theme = { ...themeInput };
	theme.typography = { ...theme.typography };
	const typography = theme.typography;
	const convert = convertLength(typography.htmlFontSize);
	const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);
	variants.forEach((variant) => {
		const style = typography[variant];
		if (!style) return;
		const remFontSize = parseFloat(convert(style.fontSize, "rem"));
		if (remFontSize <= 1) return;
		const maxFontSize = remFontSize;
		const minFontSize = 1 + (maxFontSize - 1) / factor;
		let { lineHeight } = style;
		if (!isUnitless(lineHeight) && !disableAlign) throw new Error("MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.");
		if (!isUnitless(lineHeight)) lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
		let transform = null;
		if (!disableAlign) transform = (value) => alignProperty({
			size: value,
			grid: fontGrid({
				pixels: 4,
				lineHeight,
				htmlFontSize: typography.htmlFontSize
			})
		});
		typography[variant] = {
			...style,
			...responsiveProperty({
				cssProperty: "fontSize",
				min: minFontSize,
				max: maxFontSize,
				unit: "rem",
				breakpoints: breakpointValues,
				transform
			})
		};
	});
	return theme;
}

//#endregion
//#region node_modules/@mui/material/esm/styles/useThemeProps.js
function useThemeProps({ props, name }) {
	return useThemeProps$1({
		props,
		name,
		defaultTheme: defaultTheme_default,
		themeId: identifier_default
	});
}

//#endregion
//#region node_modules/@mui/material/esm/styles/ThemeProviderNoVars.js
function ThemeProviderNoVars({ theme: themeInput,...props }) {
	const scopedTheme = identifier_default in themeInput ? themeInput[identifier_default] : void 0;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ThemeProvider_default, {
		...props,
		themeId: scopedTheme ? identifier_default : void 0,
		theme: scopedTheme || themeInput
	});
}

//#endregion
//#region node_modules/@mui/material/esm/InitColorSchemeScript/InitColorSchemeScript.js
var import_prop_types = /* @__PURE__ */ __toESM(require_prop_types(), 1);
const defaultConfig = {
	attribute: "data-mui-color-scheme",
	colorSchemeStorageKey: "mui-color-scheme",
	defaultLightColorScheme: "light",
	defaultDarkColorScheme: "dark",
	modeStorageKey: "mui-mode"
};
/**
*
* Demos:
*
* - [InitColorSchemeScript](https://mui.com/material-ui/react-init-color-scheme-script/)
*
* API:
*
* - [InitColorSchemeScript API](https://mui.com/material-ui/api/init-color-scheme-script/)
*/
function InitColorSchemeScript$1(props) {
	const { defaultMode = "system", defaultLightColorScheme = defaultConfig.defaultLightColorScheme, defaultDarkColorScheme = defaultConfig.defaultDarkColorScheme, modeStorageKey = defaultConfig.modeStorageKey, colorSchemeStorageKey = defaultConfig.colorSchemeStorageKey, attribute: initialAttribute = defaultConfig.attribute, colorSchemeNode = "document.documentElement", nonce } = props;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(InitColorSchemeScript, {
		defaultMode,
		defaultLightColorScheme,
		defaultDarkColorScheme,
		modeStorageKey,
		colorSchemeStorageKey,
		attribute: initialAttribute,
		colorSchemeNode,
		nonce
	});
}
InitColorSchemeScript$1.propTypes = {
	attribute: import_prop_types.default.string,
	colorSchemeNode: import_prop_types.default.string,
	colorSchemeStorageKey: import_prop_types.default.string,
	defaultDarkColorScheme: import_prop_types.default.string,
	defaultLightColorScheme: import_prop_types.default.string,
	defaultMode: import_prop_types.default.oneOf([
		"dark",
		"light",
		"system"
	]),
	modeStorageKey: import_prop_types.default.string,
	nonce: import_prop_types.default.string
};

//#endregion
//#region node_modules/@mui/material/esm/styles/ThemeProviderWithVars.js
var { CssVarsProvider: InternalCssVarsProvider, useColorScheme, getInitColorSchemeScript: deprecatedGetInitColorSchemeScript } = createCssVarsProvider({
	themeId: identifier_default,
	theme: () => createTheme({ cssVariables: true }),
	colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,
	modeStorageKey: defaultConfig.modeStorageKey,
	defaultColorScheme: {
		light: defaultConfig.defaultLightColorScheme,
		dark: defaultConfig.defaultDarkColorScheme
	},
	resolveTheme: (theme) => {
		const newTheme = {
			...theme,
			typography: createTypography(theme.palette, theme.typography)
		};
		newTheme.unstable_sx = function sx(props) {
			return styleFunctionSx_default({
				sx: props,
				theme: this
			});
		};
		return newTheme;
	}
});
var warnedOnce$1 = false;
function Experimental_CssVarsProvider(props) {
	if (!warnedOnce$1) {
		console.warn([
			"MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.",
			"",
			"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.",
			"For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/"
		].join("\n"));
		warnedOnce$1 = true;
	}
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(InternalCssVarsProvider, { ...props });
}
var warnedInitScriptOnce = false;
var getInitColorSchemeScript = (params) => {
	if (!warnedInitScriptOnce) {
		console.warn([
			"MUI: The getInitColorSchemeScript function has been deprecated.",
			"",
			"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`",
			"and replace the function call with `<InitColorSchemeScript />` instead."
		].join("\n"));
		warnedInitScriptOnce = true;
	}
	return deprecatedGetInitColorSchemeScript(params);
};
/**
* TODO: remove this export in v7
* @deprecated
* The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.
*
* You should use `ThemeProvider` and `createTheme()` instead:
*
* ```diff
* - import { CssVarsProvider, extendTheme } from '@mui/material/styles';
* + import { ThemeProvider, createTheme } from '@mui/material/styles';
*
* - const theme = extendTheme();
* + const theme = createTheme({
* +   cssVariables: true,
* +   colorSchemes: { light: true, dark: true },
* + });
*
* - <CssVarsProvider theme={theme}>
* + <ThemeProvider theme={theme}>
* ```
*
* To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.
*/
const CssVarsProvider = InternalCssVarsProvider;

//#endregion
//#region node_modules/@mui/material/esm/styles/ThemeProvider.js
function ThemeProvider({ theme,...props }) {
	const noVarsTheme = import_react.useMemo(() => {
		if (typeof theme === "function") return theme;
		const muiTheme = identifier_default in theme ? theme[identifier_default] : theme;
		if (!("colorSchemes" in muiTheme)) {
			if (!("vars" in muiTheme)) return {
				...theme,
				vars: null
			};
			return theme;
		}
		return null;
	}, [theme]);
	if (noVarsTheme) return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ThemeProviderNoVars, {
		theme: noVarsTheme,
		...props
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CssVarsProvider, {
		theme,
		...props
	});
}

//#endregion
//#region node_modules/@mui/material/esm/styles/makeStyles.js
function makeStyles() {
	throw new Error("MUI: makeStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.");
}

//#endregion
//#region node_modules/@mui/material/esm/styles/withStyles.js
function withStyles() {
	throw new Error("MUI: withStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.");
}

//#endregion
//#region node_modules/@mui/material/esm/styles/withTheme.js
function withTheme() {
	throw new Error("MUI: withTheme is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.");
}

//#endregion
//#region node_modules/@mui/material/esm/styles/experimental_extendTheme.js
var warnedOnce = false;
function deprecatedExtendTheme(...args) {
	if (!warnedOnce) {
		console.warn([
			"MUI: The `experimental_extendTheme` has been stabilized.",
			"",
			"You should use `import { extendTheme } from '@mui/material/styles'`"
		].join("\n"));
		warnedOnce = true;
	}
	return createThemeWithVars(...args);
}

//#endregion
//#region node_modules/@mui/material/esm/styles/index.js
function experimental_sx() {
	throw new Error("MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150.");
}

//#endregion
export { CssVarsProvider, Experimental_CssVarsProvider, StyledEngineProvider, ThemeProvider, adaptV4Theme, createMuiStrictModeTheme, createStyles, deprecatedExtendTheme, experimental_sx, getInitColorSchemeScript, getUnit, makeStyles, responsiveFontSizes, toUnitless, useColorScheme, useThemeProps, withStyles, withTheme };
//# sourceMappingURL=styles-DuA3Jiww.js.map